#!/bin/bash
set -euo pipefail

source vmbk.cfg
cd $BACKUP_PATH

sub_strip_backing_path() {
  for IMG in $(ls -r $BACKUP_PATH); do
    BACKING_FILE=$(qemu-img info "$IMG" | grep "backing file:" | awk '{print $3}' || true)
    if [[ "$BACKING_FILE" =~ $LIVE_PATH ]]; then
      if [ $CONVERT == 1 ]; then
        echo converting "$IMG"
        NEW_BACKING_FILE=${BACKING_FILE//$LIVE_PATH/}
        qemu-img rebase -u -b "$NEW_BACKING_FILE" "$IMG"
      else
        echo "$IMG" needs converting
      fi
    fi
  done
}

sub_validate_chain() {
  BROKEN_IMGS=""
  HEALTHY=""
  for IMG in $(ls -r $BACKUP_PATH); do
    if [[ $HEALTHY =~ $IMG ]]; then
      continue
    fi

    # To distinguish between a partial, a full, and a bad image we
    # need both the output and retval. So we disable "set -e" briefly.
    set +e
    OUTPUT=$(qemu-img info --backing-chain "$IMG" 2> /dev/null)
    retval=$?
    set -e

    if [ $retval -ne 0 ]; then
      BROKEN_IMGS="$BROKEN_IMGS $IMG"
      continue
    fi

    # Parse the output for a chain of images.
    CHAIN=$(echo "$OUTPUT" | grep "backing file:" | awk '{print $3}' || true)

    # Add the chain to the list of healthy images
    if [ -n "$CHAIN" ]; then
      HEALTHY="$HEALTHY $CHAIN"
    fi
  done

  if [ -n "$BROKEN_IMGS" ]; then
    echo "$BROKEN_IMGS"
    exit 1
  fi

}

sub_do_backup() {
  for VM in $VMS; do
    $FIBACKUP -d -v -q -b $BACKUP_PATH "$VM" >> $LOGFILE;
  done
  sub_strip_backing_path
  sub_validate_chain
}

sub_consolidate() {
  for VM in $VMS; do
    $FIBACKUP -d -v -c "$VM" >> $LOGFILE;
  done
}

sub_help() {
  echo validate_chain
  echo do_backup
  echo strip_backing_path
  echo consolidate
  echo help
  exit
}

if [ -z "${1+x}" ]; then
  sub_help
fi

subcommand=$1
case $subcommand in
  "" | "-h" | "--help")
    sub_help
    ;;
  *)
    shift
    sub_"${subcommand}" "$@"
    ;;
esac
